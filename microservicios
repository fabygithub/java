eclipe new other
spring starter project 
// a set of convenient dependency descriptors that you can include in your application. 
// configuracion rapida del projecto


name : usuario-service
crear carpeta : microservicios-tutorial
desmarcar use default destination
microservicios-tutorial
C:\Users\USUARIO\Desktop\fabi\cursos\microservicios-tutorial
se agrega el nombre
C:\Users\USUARIO\Desktop\fabi\cursos\microservicios-tutorial\usuario-service
Group : usuario-service

Artifact : usuario-service 
// An artifact in maven is a resource generated by a maven project. 
// maven lo genera el recurso

Version : 1.0
Description : 
package : com.usuario.service


next
dependencies 
// a dependency refers to an external library or module upon which a project relies to perform specific tasks. 
// es una libreria externa o un modulo 


Spring Boot Version 2.6.6
Spring Boot DevTools 
// The Spring boot dev tools module includes many useful developer features for improving the development experience. 
//son herramientas para mejorar la experiencia de desarrollo

Spring Data JPA 
// Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA-based (Java Persistence API)repositories.
// nos sirve para implementar repositorios java

H2 Database 
// H2 is a relational database management system written in Java
// es una base de datos relacional

Spring Web 
// Spring Web Services (Spring-WS) is focused on creating document-driven Web services
// nos sirve para crear aplicaciones web


finish
new package
com.usuario.service 
com.usuario.service.entidades
new class Usuario


@Entity 
// @Entity annotation defines that a class can be mapped to a table
// nos sirve para mapear una clase a una tabla

public class Usuario{

@Id 
// The @Id annotation is inherited from javax.persistence.Id, indicating the member field below is the primary key of the current entity
// nos sirve para identificar un id dentro de una entidad

@GeneratedValue(strategy = GenerationType.IDENTITY)
The @GeneratedValue annotation can be used with parameters alongside @Id to designate how an entity's unique ID value will be generated.
// esta anotacion se usa con parametros para designar un id que sea unico

private int id;
private String nombre;
private String email;

click derecho
source
generate getters and setters select all generated

generar constructor vacio

seleccionar todo el codigo source format
}


com.usuario.service
new package
com.usuario.service.repositorio
new class 
UsuarioRepository
cambiar de class a interface


@Repository
// A repository includes all the methods such as sorting, paginating data and CRUD operations.
// estan los metodos para hacer un crud


public interface UsuarioRepository extends JpaRepository<Usuario,Integer>{
}
// An interface defines the public properties and methods of any class that implements it.
// define propiedades y metodos que cualquier clase puede ocupar

// So it contains API for basic CRUD operations and also API for pagination and sorting
// jparepository contiene las operaciones basicas de una base de datos

com.usuario.service
new package
com.usuario.service.servicios

@Service 
// a layer of your application responsible for carrying out business logic and encapsulating the application's functionality.
// nos sirve para encapsular las funcionalidades de la aplicacion

public class UsuarioService{
 @Autowired 
 private UsuarioRepositoty usuarioRepository;
//@Autowired is a mechanism by which Spring Boot automatically resolves and injects collaborating beans into your objects
// es un mecanismo automaticamente resuelve colaboraciones entre objetos 

 
 private List<Usuario> getAll(){
 return usuarioRepository.findAll();
 }

// a List is "An ordered collection" and a Collection "represents a group of objects, known as its elements
// una lista es una conjunto ordenado de elementos
 
private Usuario getUsuarioById(int id){
 return usuarioRepository.findById(id).orElse(null);
}

// The findById method retrieves an entity by its unique identifier (id). 
// devuelve una entidad unica


private Usuario save(Usuario usuario){
 Usuario nuevoUsuario = usuarioRepository.save(usuario);
 return nuevoUsuario;
}
 
}


com.usuario.service
new package
com.usuario.service.controlador
new class 
UsuarioController

package com.usuario.service.controlador;


@RestController
@RequestMapping("/usuario")
public class Usuario Controller{

@Autowired
private UsuarioService usuarioService;
 
 @GetMapping
 public ResponseEntity<List<Usuario>> listarUsuarios()
   List<Usuario> usuarios = usuarioService.getAll();
    if(usuarios.isEmpty)()){
       return ResponseEntity.noContent().build();  
    }
       return ResponseEntity.ok(usuarios);

 }

public ResponseEntity.ok<Usuario> obtenerUsuario(@PathVariable("id")int id){
 Usuario usuario  = usuarioService.getUsuarioById(id);
  if(usuario == null){
     return ResponseEntity.notFound().build();
     
  }
  return ResponseEntity.ok(usuario)
  
}
@PostMapping
public ResponseEntity<Usuario> guardarUsuario(@RequestBody Usuario usuario){
 Usuario nuevoUsuario = usuarioService.save(usuario);
 return ResponseEntity.ok(nuevoUsuario)
 
}
}

run as spring boot app
postman
+
get http://localhost:8080/usuario
post http://localhost:8080/usuario
body
json

{
"nombre" : "Christian"
"email"  : "c1@gmail.com"
}

(agregar varios nombre)

"nombre" : "Gabriel"
"email"  : "g1@gmail.com"

"nombre" : "Julen"
"email"  : "j1@gmail.com"

"nombre" : "Biaggio"
"email"  : "b1@gmail.com"

send

get http://localhost:8080/usuario/2
get http://localhost:8080/usuario/10

(creacion de microservicios)
new spring starter project

name : carro-service
group : carro-service
package : com.carro.service

descripcion (vacio)
no usar ruta por defecto 
carpeta microservicios-tutorial
C:\Users\USUARIO\Desktop\fabi\cursos\microservicios-tutorial\carro-service

dependencias

spring web
spring boot devtools
h2 database
spring data jpa

finish

com.carro.service 
nuevo packete
com.carro.service.entidades
nueva clase
Carro

@Entity
clase

@Id
@GeneratedValue(Strategy = GenerationType.IDENTITY)
private int id;
private String marca;
private String modelo;
private int usuarioId;

souce
generar get and set
agregar un constructor vacio

seleccionar todo 
formatear

application.properties
server.port=8081
spring.application.name=usuario-service


nuevo packete
com.carro.service.repositorio
interfaz
CarroRepository extends JpaRepository<Carro,Integer>{
List<Carro> findByUsuario(int usuarioId);
}

com.carro.service.servicios

clase
CarroService

@Autowired
private CarroRepository carroRepository;

public List<Carro> getAll(){
 return carroRepository.findAll();
}

public Carro getUsuarioById(int id){
 return carroRepository.findById(id).orElse(null);
}

public Carro save(Carro usuario){
 Carro nuevoCarro = CarroRepository.save(usuario);
 return nuevoCarro;
 
}

public List<Carro> byUsuarioId(int usuarioId){
  return carroRepository.findByUsuario(usuarioId);
}

}

nuevo packete
com.carro.service.controladores

@RestController
@RequestMapping("/carro")
clase CarroController

@Autowired
private CarroService carroService

@GetMapping
public ResponseEntity<List<Usuario>




























