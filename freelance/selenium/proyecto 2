 https://www.browserstack.com/guide/selenium-with-java-for-automated-test
 
 automate the testing of web applications.
 good community of developers
 Selenium supports Java.
 is compatible with multiple operating systems like Windows, Linux, Solaris, Macintosh
 
 Step #1 – Install Java
 is required to write and run Java programs.
 need the dependency of Java, one needs to install JDK.
 Eclipse IDE.
 typing java -version
 
Step #2 – Install Eclipse

Eclipse is a platform for Java developers 
to write their code and run it. 
Download Eclipse from their office page. 

Based on the OS, one can go with the required option. 
Once downloaded, extract the downloaded file. 
Once completed, one can see the eclipse .exe 
in the eclipse folder:

Step #3 – Selenium Client and WebDriver Language Bindings

Selenium Webdriver 
supports multiple languages, 
and each language has its client driver. 
As we are using Selenium with Java, 
we need to have ‘Selenium Java Client Driver’.
One can download the client driver
from the official Selenium website.
One can see the multiple language
client drivers provided by Selenium:

Once downloaded,
extract the contents 
of the downloaded file and 
then move to the next step, 
which is
configuring Selenium Webdriver 
with Eclipse.


Step #4 – Configuring Selenium WebDriver With Eclipse
This is a vital step 
of starting with Selenium. 
To configure Eclipse with 
Selenium Webdriver client,

Double click on the eclipse.exe 
file to launch it
Create a workspace

Think of it just 
like any other folder

which stores 
all the scripts
in one place. 

One can choose 
to create as many
workspaces as required.

Click on Launch to launch the workspace.
Create a new java 
project by clicking on 
File-> New-> Java Project 
and name the project

Create a package under this project, 
by right-clicking on the ‘src’ folder

Once the package is created, 
right-click on the package and create a class. 

Once the class is created, 
go ahead with adding the Selenium Jars 
to the project.

To add the Selenium Jars, 
right-click on the project folder 
and go to Properties:

From the Properties window,
navigate to ‘Java Build Path’ 
and click on ‘Add External JAR’s

Add the downloaded Selenium Jars 
and click on ‘Apply and Close.’ 
Selenium with Eclipse is configured now. 
Now Eclipse is ready to execute the first script.

Step #5 – Creating and Running 
the first test using Selenium and Java

As the first test, 
we will write a script to open ‘google.com’ 
on the Chrome browser. 

To use Chrome, 
it is mandatory to have the driver executable.
To download the driver executable, 
visit the Selenium website. 
In the third-party driver browser section, 
one can download the executable file for a specific browser.

Post downloading,
below is the code snippet 
to run the first test
using Selenium and Java:


import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class FirstTestInSelenium {

public static void main(String[] args) {
// TODO Auto-generated method stub

//setting the driver executable
System.setProperty("webdriver.chrome.driver", ".\\Driver\\chromedriver.exe");

//Initiating your chromedriver
WebDriver driver=new ChromeDriver();

//Applied wait time
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
//maximize window
driver.manage().window().maximize();

//open browser with desried URL
driver.get("https://www.google.com");

//closing the browser
driver.close();

}

}


import java.util.concurrent.TimeUnit;
java.util.concurrent
Enum TimeUnit
java.lang.Object
java.lang.Enum<TimeUnit>
java.util.concurrent.TimeUnit
All Implemented Interfaces:
Serializable, Comparable<TimeUnit>


public enum TimeUnit
extends Enum<TimeUnit>
A TimeUnit represents time durations
at a given unit of granularity 

and provides utility methods to convert across units,
and to perform timing and delay operations in these units. 

A TimeUnit does not maintain 
time information, but 
only helps organize and use time representations
that may be maintained separately across various contexts.

A nanosecond is defined as one thousandth of a microsecond, 
a microsecond as one thousandth of a millisecond, 

a millisecond as one thousandth of a second,

a minute as sixty seconds,

an hour as sixty minutes, 
and a day as twenty four hours.


A TimeUnit is mainly used to inform time-based methods
how a given timing parameter should be interpreted. 
For example, the following code will timeout in 50 milliseconds 
if the lock is not available:

  Lock lock = ...;
  
  if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...
 
while this code will timeout in 50 seconds:

  Lock lock = ...;
  
  if (lock.tryLock(50L, TimeUnit.SECONDS)) ...
 
Note however, that there is no guarantee that a particula
r timeout implementation will be able to notice the passage 
of time at the same granularity as the given TimeUnit.
Since:
1.5


